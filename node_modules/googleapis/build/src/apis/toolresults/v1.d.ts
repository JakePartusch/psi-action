import { GoogleConfigurable, GlobalOptions, APIRequestContext } from 'googleapis-common';
export declare namespace toolresults_v1 {
    interface Options extends GlobalOptions {
        version: 'v1';
    }
    /**
     * Cloud Tool Results API
     *
     * API to publish and access results from developer tools.
     *
     * @example
     * const {google} = require('googleapis');
     * const toolresults = google.toolresults('v1');
     *
     * @namespace toolresults
     * @type {Function}
     * @version v1
     * @variation v1
     * @param {object=} options Options for Toolresults
     */
    class Toolresults {
        context: APIRequestContext;
        constructor(options: GlobalOptions, google?: GoogleConfigurable);
    }
    /**
     * Additional details for an ANR crash.
     */
    interface Schema$ANR {
        /**
         * The stack trace of the ANR crash. Optional.
         */
        stackTrace?: Schema$StackTrace;
    }
    /**
     * A suggestion to use deep links for a Robo run.
     */
    interface Schema$AvailableDeepLinks {
    }
    /**
     * A warning that Robo encountered a screen that was mostly blank; this may indicate a problem with the app.
     */
    interface Schema$BlankScreen {
        /**
         * The screen id of the element
         */
        screenId?: string | null;
    }
    /**
     * Crash dialog was detected during the test execution
     */
    interface Schema$CrashDialogError {
        /**
         * The name of the package that caused the dialog.
         */
        crashPackage?: string | null;
    }
    /**
     * Additional details about encountered login screens.
     */
    interface Schema$EncounteredLoginScreen {
        /**
         * Number of encountered distinct login screens.
         */
        distinctScreens?: number | null;
        /**
         * Subset of login screens.
         */
        screenIds?: string[] | null;
    }
    /**
     * Additional details about encountered screens with elements that are not Android UI widgets.
     */
    interface Schema$EncounteredNonAndroidUiWidgetScreen {
        /**
         * Number of encountered distinct screens with non Android UI widgets.
         */
        distinctScreens?: number | null;
        /**
         * Subset of screens which contain non Android UI widgets.
         */
        screenIds?: string[] | null;
    }
    /**
     * Failed to install the APK.
     */
    interface Schema$FailedToInstall {
    }
    /**
     * Additional details for a fatal exception.
     */
    interface Schema$FatalException {
        /**
         * The stack trace of the fatal exception. Optional.
         */
        stackTrace?: Schema$StackTrace;
    }
    /**
     * Additional details of in-app purchases encountered during the crawl.
     */
    interface Schema$InAppPurchasesFound {
        /**
         * The total number of in-app purchases flows explored: how many times the robo tries to buy a SKU.
         */
        inAppPurchasesFlowsExplored?: number | null;
        /**
         * The total number of in-app purchases flows started.
         */
        inAppPurchasesFlowsStarted?: number | null;
    }
    /**
     * A warning that Robo did not crawl potentially important parts of the app.
     */
    interface Schema$InsufficientCoverage {
    }
    /**
     * Additional details for an iOS app crash.
     */
    interface Schema$IosAppCrashed {
        /**
         * The stack trace, if one is available. Optional.
         */
        stackTrace?: Schema$StackTrace;
    }
    /**
     * Failed to find the launcher activity of an app.
     */
    interface Schema$LauncherActivityNotFound {
    }
    /**
     * Additional details for a native crash.
     */
    interface Schema$NativeCrash {
        /**
         * The stack trace of the native crash. Optional.
         */
        stackTrace?: Schema$StackTrace;
    }
    /**
     * A non-sdk API and examples of it being called along with other metadata See https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces
     */
    interface Schema$NonSdkApi {
        /**
         * The signature of the Non-SDK API
         */
        apiSignature?: string | null;
        /**
         * Example stack traces of this API being called.
         */
        exampleStackTraces?: string[] | null;
        /**
         * Optional debugging insights for non-SDK API violations.
         */
        insights?: Schema$NonSdkApiInsight[];
        /**
         * The total number of times this API was observed to have been called.
         */
        invocationCount?: number | null;
        /**
         * Which list this API appears on
         */
        list?: string | null;
    }
    /**
     * Non-SDK API insights (to address debugging solutions).
     */
    interface Schema$NonSdkApiInsight {
        /**
         * Optional sample stack traces, for which this insight applies (there should be at least one).
         */
        exampleTraceMessages?: string[] | null;
        /**
         * A unique ID, to be used for determining the effectiveness of this particular insight in the context of a matcher. (required)
         */
        matcherId?: string | null;
        /**
         * An insight indicating that the hidden API usage originates from a Google-provided library.
         */
        pendingGoogleUpdateInsight?: Schema$PendingGoogleUpdateInsight;
        /**
         * An insight indicating that the hidden API usage originates from the use of a library that needs to be upgraded.
         */
        upgradeInsight?: Schema$UpgradeInsight;
    }
    /**
     * Additional details for a non-sdk API usage violation.
     */
    interface Schema$NonSdkApiUsageViolation {
        /**
         * Signatures of a subset of those hidden API&#39;s.
         */
        apiSignatures?: string[] | null;
        /**
         * Total number of unique hidden API&#39;s accessed.
         */
        uniqueApis?: number | null;
    }
    /**
     * Contains a summary and examples of non-sdk API usage violations.
     */
    interface Schema$NonSdkApiUsageViolationReport {
        /**
         * Examples of the detected API usages.
         */
        exampleApis?: Schema$NonSdkApi[];
        /**
         * Minimum API level required for the application to run.
         */
        minSdkVersion?: number | null;
        /**
         * Specifies the API Level on which the application is designed to run.
         */
        targetSdkVersion?: number | null;
        /**
         * Total number of unique Non-SDK API&#39;s accessed.
         */
        uniqueApis?: number | null;
    }
    /**
     * A warning that Robo encountered a screen that has overlapping clickable elements; this may indicate a potential UI issue.
     */
    interface Schema$OverlappingUIElements {
        /**
         * Resource names of the overlapping screen elements
         */
        resourceName?: string[] | null;
        /**
         * The screen id of the elements
         */
        screenId?: string | null;
    }
    /**
     * This insight indicates that the hidden API usage originates from a Google-provided library. Users need not take any action.
     */
    interface Schema$PendingGoogleUpdateInsight {
        /**
         * The name of the Google-provided library with the non-SDK API dependency.
         */
        nameOfGoogleLibrary?: string | null;
    }
    /**
     * A notification that Robo signed in with Google.
     */
    interface Schema$PerformedGoogleLogin {
    }
    /**
     * A notification that Robo performed some monkey actions.
     */
    interface Schema$PerformedMonkeyActions {
        /**
         * The total number of monkey actions performed during the crawl.
         */
        totalActions?: number | null;
    }
    /**
     * Execution stats for a user-provided Robo script.
     */
    interface Schema$RoboScriptExecution {
        /**
         * The number of Robo script actions executed successfully.
         */
        successfulActions?: number | null;
        /**
         * The total number of actions in the Robo script.
         */
        totalActions?: number | null;
    }
    /**
     * A stacktrace.
     */
    interface Schema$StackTrace {
        /**
         * The stack trace message.  Required
         */
        exception?: string | null;
    }
    /**
     * User provided intent failed to resolve to an activity.
     */
    interface Schema$StartActivityNotFound {
        action?: string | null;
        uri?: string | null;
    }
    /**
     * A warning that the screen hierarchy is deeper than the recommended threshold.
     */
    interface Schema$UIElementTooDeep {
        /**
         * The depth of the screen element
         */
        depth?: number | null;
        /**
         * The screen id of the element
         */
        screenId?: string | null;
        /**
         * The screen state id of the element
         */
        screenStateId?: string | null;
    }
    /**
     * Default unspecified warning.
     */
    interface Schema$UnspecifiedWarning {
    }
    /**
     * Additional details of an unused robodirective.
     */
    interface Schema$UnusedRoboDirective {
        /**
         * The name of the resource that was unused.
         */
        resourceName?: string | null;
    }
    /**
     * This insight is a recommendation to upgrade a given library to the specified version, in order to avoid dependencies on non-SDK APIs.
     */
    interface Schema$UpgradeInsight {
        /**
         * The name of the package to be upgraded.
         */
        packageName?: string | null;
        /**
         * The suggested version to upgrade to. Optional: In case we are not sure which version solves this problem
         */
        upgradeToVersion?: string | null;
    }
    /**
     * Additional details of a used Robo directive.
     */
    interface Schema$UsedRoboDirective {
        /**
         * The name of the resource that was used.
         */
        resourceName?: string | null;
    }
    /**
     * Additional details of a used Robo directive with an ignore action. Note: This is a different scenario than unused directive.
     */
    interface Schema$UsedRoboIgnoreDirective {
        /**
         * The name of the resource that was ignored.
         */
        resourceName?: string | null;
    }
}
